const util = require('./util');
test('test distribution', () => {
  expect(util.default.createDistribution([1,1,2,3,4,5], 5)).toEqual([[0,2],[1,1],[2,1],[3,1],[4,1]]);
  expect(util.default.createDistribution([1,1,1,1,1,1], 5)).toEqual([[0,6],[1,0],[2,0],[3,0],[4,0]]);
  expect(util.default.createDistribution([0,0,0,0,0,0], 5)).toEqual([[0,6],[1,0],[2,0],[3,0],[4,0]]);
  expect(util.default.createDistribution([1,1,1,1,1,1], 5)).toEqual([[0,6],[1,0],[2,0],[3,0],[4,0]]);
  expect(util.default.createDistribution([1,1,1,1,1,1], 5, .95)).toEqual([[0,6],[1,0],[2,0],[3,0],[4,0]]);
  expect(util.default.createDistribution([1,1,1,5,5,5], 5)).toEqual([[0,3],[1,0],[2,0],[3,0],[4,3]]);
  expect(util.default.createDistribution([1,1,1,1,1,2], 5, .6)).toEqual([[0,5],[1,0],[2,0],[3,0],[4,0]]);
  expect(util.default.createDistribution([1,2,3,4,5,6], 3, .5)).toEqual([[0,1],[1,1],[2,1]]);
  expect(util.default.createDistribution([-1,2,3,4,5,6], 3, .5)).toEqual([[0,1],[1,0],[2,2]]);
  expect(util.default.createDistribution([4, 5, 6, 8, 9, 10, 16, 17, 18, 23, 26, 27, 30, 31, 33, 34, 36,
      39, 40, 41, 48, 49, 50, 51, 52, 54, 56, 60, 61, 67, 69, 70, 71, 73, 75, 78, 80, 84, 92, 93, 95, 97, 99,
      101, 103, 105, 106, 111, 112, 114, 116, 118, 121, 123, 128, 130, 131, 132, 133, 137, 138, 139, 140,
      143, 144, 145, 147, 149, 150, 151, 152, 155, 156, 157, 161, 162, 163, 164, 168, 171, 172, 174, 175, 178,
      179, 180, 181, 183, 184, 185, 186, 189, 190, 197, 198, 199, 201, 202, 205, 210, 211, 212, 213, 214, 218,
      219, 221, 223, 227, 229, 231, 234, 235, 238, 239, 245, 246, 249, 250, 252, 254, 255, 257, 259, 261, 263,
      264, 267, 268, 270, 271, 272, 274, 275, 278, 279, 281, 282, 284, 285, 286, 289, 293, 295, 297, 298, 301,
      303, 309, 310, 312, 313, 314, 316, 317, 319, 320, 322, 323, 324, 326, 328, 331, 332, 337, 338, 342, 343,
      348, 351, 352, 353, 355, 357, 358, 359, 360, 361, 363, 364, 367, 375, 377, 378, 379, 384, 385, 387, 389,
      390, 391, 393, 395, 396, 397, 398, 400, 401, 403, 407, 410, 411, 412, 413, 414, 415, 417, 419, 422, 425,
      428, 429, 431, 433, 435, 436, 437, 440, 441, 442, 444, 448, 454, 455, 457, 459, 461, 467, 468, 475, 476,
      478, 479, 480, 482, 486, 487, 489, 493, 495, 496, 498, 499, 500, 501, 502, 503, 505, 511, 513, 514, 515,
      517, 520, 521, 523, 524, 527, 530, 532, 533, 535, 542, 544, 547, 549, 551, 555, 560, 563, 566, 573, 575,
      578, 579, 580, 581, 582, 583, 590, 592, 593, 595, 596, 597, 598, 599, 600, 602, 603, 605, 606, 613, 614,
      615, 616, 617, 619, 624, 625, 626, 627, 632, 633, 634, 635, 638, 640, 641, 642, 643, 644, 645, 648, 650,
      651, 652, 654, 655, 656, 661, 663, 666, 669, 671, 673, 676, 677, 680, 682, 683, 684, 685, 687, 688, 689,
      690, 693, 695, 697, 700, 701, 705, 706, 707, 708, 709, 711, 712, 713, 714, 717, 721, 727, 730, 732, 733,
      734, 735, 736, 737, 739, 740, 741, 743, 747, 750, 754, 756, 759, 764, 766, 769, 770, 771, 772, 775, 776,
      777, 778, 781, 782, 783, 784, 785, 790, 791, 796, 798, 800, 801, 802, 803, 807, 810, 811, 820, 821, 822,
      823, 825, 826, 828, 829, 833, 835, 838, 840, 841, 842, 844, 845, 846, 847, 849, 850, 856, 857, 860, 863,
      864, 867, 868, 871, 874, 877, 879, 881, 882, 884, 885, 886, 887, 890, 892, 893, 894, 895, 896, 897, 898,
      899, 901, 904, 905, 906, 907, 908, 910, 911, 912, 918, 919, 920, 921, 925, 928, 929, 930, 936, 937, 938,
      939, 940, 941, 943, 945, 947, 949, 950, 951, 953, 954, 955, 956, 957, 959, 960, 966, 967, 969, 970, 971,
      974, 979, 980, 982, 983, 985, 988, 989, 990, 992, 993, 994, 995, 996, 997, 999, 1000], 20))
      .toEqual([[0, 25], [1, 20], [2, 26], [3, 27], [4, 22], [5, 27], [6, 24], [7, 27], [8, 24], [9, 23], [10, 22],
          [11, 21], [12, 28], [13, 26], [14, 25], [15, 23], [16, 26], [17, 26], [18, 28], [19, 30]]);
});

